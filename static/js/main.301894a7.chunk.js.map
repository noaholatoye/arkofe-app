{"version":3,"sources":["components /Navbar.js","components /HompageBanner.js","components /AboutRoll.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","Navbar","collapseOnSelect","expand","bg","variant","Container","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","eventKey","Component","HompageBanner","components_Navbar","autoPlay","muted","type","data-reactid","src","alt","ABoutRoll","Jumbotron","Button","App","components_HompageBanner","AboutRoll","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSA6BeA,mLAxBb,OACCC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QACtDP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACCR,EAAAC,EAAAC,cAACC,EAAA,EAAOM,MAAR,CAAcC,KAAK,SAAnB,UACAV,EAAAC,EAAAC,cAACC,EAAA,EAAOQ,OAAR,CAAeC,gBAAc,0BAC7BZ,EAAAC,EAAAC,cAACC,EAAA,EAAOU,SAAR,CAAiBC,GAAG,yBACnBd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAKC,UAAU,WACdhB,EAAAC,EAAAC,cAACa,EAAA,EAAIE,KAAL,CAAUP,KAAK,aAAf,SACAV,EAAAC,EAAAC,cAACa,EAAA,EAAIE,KAAL,CAAUP,KAAK,YAAf,QACAV,EAAAC,EAAAC,cAACa,EAAA,EAAIE,KAAL,CAAUP,KAAK,YAAf,gBAEDV,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACCf,EAAAC,EAAAC,cAACa,EAAA,EAAIE,KAAL,CAAUP,KAAK,UAAf,aACAV,EAAAC,EAAAC,cAACa,EAAA,EAAIE,KAAL,CAAUC,SAAU,EAAGR,KAAK,UAA5B,sBAfcS,aCmBNC,MAjBf,WACC,OACCpB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,mBACdhB,EAAAC,EAAAC,cAACmB,EAAD,MAEArB,EAAAC,EAAAC,cAAA,SAAOoB,SAAS,OAAOC,MAAM,QAC5BvB,EAAAC,EAAAC,cAAA,UACCsB,KAAK,YACLC,eAAa,aACbC,IAAI,+BAGN1B,EAAAC,EAAAC,cAAA,OAAKwB,IAAI,8CAA8CC,IAAI,2BCG/CC,MAjBf,WACC,OACC5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,KACC7B,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACCR,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,2IAIAF,EAAAC,EAAAC,cAAA,SACCF,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAQvB,QAAQ,WAAhB,kBCCUwB,MATf,WACC,OACC/B,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAC8B,EAAD,MACAhC,EAAAC,EAAAC,cAAC+B,EAAD,QCGiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.301894a7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Navbar, Nav, Container } from \"react-bootstrap\";\n\nclass NavBar extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n\t\t\t\t<Container>\n\t\t\t\t\t<Navbar.Brand href=\"#home\">Arkofe</Navbar.Brand>\n\t\t\t\t\t<Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n\t\t\t\t\t<Navbar.Collapse id=\"responsive-navbar-nav\">\n\t\t\t\t\t\t<Nav className=\"mr-auto\">\n\t\t\t\t\t\t\t<Nav.Link href=\"#features\">About</Nav.Link>\n\t\t\t\t\t\t\t<Nav.Link href=\"#pricing\">Blog</Nav.Link>\n\t\t\t\t\t\t\t<Nav.Link href=\"#pricing\">Get Started</Nav.Link>\n\t\t\t\t\t\t</Nav>\n\t\t\t\t\t\t<Nav>\n\t\t\t\t\t\t\t<Nav.Link href=\"#deets\">Resources</Nav.Link>\n\t\t\t\t\t\t\t<Nav.Link eventKey={2} href=\"#memes\">\n\t\t\t\t\t\t\t\tPodcast\n\t\t\t\t\t\t\t</Nav.Link>\n\t\t\t\t\t\t</Nav>\n\t\t\t\t\t</Navbar.Collapse>\n\t\t\t\t</Container>\n\t\t\t</Navbar>\n\t\t);\n\t}\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport Navbar from \"./Navbar\";\nimport { ResponsiveEmbed } from \"react-bootstrap\";\n\nconst VideoBackground = \"./src/assets/videos/dummy-video.mp4\";\nfunction HompageBanner() {\n\treturn (\n\t\t<div className=\"homepage-banner\">\n\t\t\t<Navbar />\n\n\t\t\t<video autoPlay=\"true\" muted=\"true\">\n\t\t\t\t<source\n\t\t\t\t\ttype=\"video/mp4\"\n\t\t\t\t\tdata-reactid=\".0.1.0.0.0\"\n\t\t\t\t\tsrc=\"../videos/dummy-video.mp4\"\n\t\t\t\t/>\n\t\t\t</video>\n\t\t\t<img src=\"../assets/videos/shutterstock_691408807.jpg\" alt=\"Text\" />\n\t\t</div>\n\t);\n}\n\nexport default HompageBanner;\n","import React from \"react\";\nimport { Jumbotron, Button, Container } from \"react-bootstrap\";\n\nfunction ABoutRoll() {\n\treturn (\n\t\t<Jumbotron>\n\t\t\t<Container>\n\t\t\t\t<h1>Arkofe</h1>\n\t\t\t\t<p>\n\t\t\t\t\tThis is a simple hero unit, a simple jumbotron-style component for\n\t\t\t\t\tcalling extra attention to featured content or information.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t<Button variant=\"primary\">Learn more</Button>\n\t\t\t\t</p>\n\t\t\t</Container>\n\t\t</Jumbotron>\n\t);\n}\n\nexport default ABoutRoll;\n","import React from \"react\";\nimport \"./App.css\";\nimport HomepageBanner from \"./components /HompageBanner\";\nimport AboutRoll from \"./components /AboutRoll\";\n\nfunction App() {\n\treturn (\n\t\t<div>\n\t\t\t<HomepageBanner />\n\t\t\t<AboutRoll />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}